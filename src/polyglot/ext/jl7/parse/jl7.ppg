// Assumes polyglot.jar is in classpath
include "polyglot/ext/jl5/parse/jl5.ppg"

package polyglot.ext.jl7.parse;

import polyglot.parse.*;
import polyglot.ext.jl5.parse.*;
import polyglot.ext.jl7.ast.*;
import polyglot.ext.jl7.types.*;


parser Grm extends polyglot.ext.jl5.parse.Grm  {:
  public final JL7TypeSystem ts;
  public final JL7NodeFactory nf;
    
  public Grm(Lexer l, TypeSystem t, NodeFactory n, ErrorQueue q) {
    super(l, t, n, q);
    ts = (JL7TypeSystem) t;
    nf = (JL7NodeFactory) n;
  }

:};


non terminal LinkedList catch_type; // List<TypeNode>

start with goal;


override catch_clause ::=
                    // Catch
         CATCH:n LPAREN modifiers_or_annotations_opt:a catch_type:b IDENTIFIER:c RPAREN block:d
            {: Formal f = parser.nf.Formal(parser.pos(b, c, c), a.flags(), a.annotations(),
                        parser.nf.AmbUnionType(parser.pos(b), b), parser.nf.Id(parser.pos(c), c.getIdentifier()));
               if (b.size() > 1) { 
                  RESULT = parser.nf.MultiCatch(parser.pos(n, d), f, b, d); 
               }
               else {              
                  RESULT = parser.nf.Catch(parser.pos(n, d), f, d); 
               }
            :}
    ;

catch_type ::=
     name:a
        {: LinkedList l = new LinkedList<Type>();
           l.add(a.toType());
           RESULT = l; :}
   | name:a OR catch_type: as
        {: as.addFirst(a.toType()); RESULT = as; :}
   ;
   
